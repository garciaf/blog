---
layout: presentation
title: ReactJS and Rails
subtitle: How look life with react when you are a rails developer? We will try to answer this question today
date: 2015-11-24 10:23 UTC
tags: javascript, rails, ruby
categories: slide
theme: white
lang: en
published: true
cover: reactjs.png
---

%section
  %h1 ReactJs and Rails
  %a.image{:href => "#/1"}
    %img{:height => "238", :src => image_path("reactjs.png")}
  %p
    %small
      %a{:href => "http://fabbook.fr/author/fabien"} Fabien Garcia

%section
  %h2 Philosophy of the framework
  %ul
    %li Care about the view
    %li Care about binding
    %li Care about rendering
    %li Everything is component

%section
  %section
    %h2 Install with rails
    %h3 How ?
    %pre
      %code.ruby
        :preserve
          # Gemfile
          gem 'react-rails'
          # In the console
          bundle install
    %h3 That was hard right? 
  %section
    %h2 Why this gem?
    %img{:src => image_path("2015-11-24-reactjs-and-rails/rubygem.png"), :alt => "ranking"}/
  
  %section
    %h2 Benefits of react-rails
    %ul
      %li Provide various react builds to your asset bundle
      %li Transform .jsx in the asset pipeline
      %li Render components into views and mount them via view helper & react_ujs
      %li Render components server-side with prerender: true
      %li Generate components with a Rails generator
      %li Be extended with custom renderers, transformers and view helpers

%section
  %section
    %h1 Sample App
    %h2 List records
  %section
    %h1 Controller
    %pre
      %code.ruby
        :preserve
          # app/controllers/records_controller.rb

          class RecordsController < ApplicationController
            def index
              @records = Record.all
            end
          end
  %section
    %h1 View
    %h2 Helper 
    %pre
      %code.erb
        :preserve
          <%# app/views/records/index.html.erb %>
          <%= react_component 'Records', { data: @records } %>
    %h3 Generate
    %pre
      %code.html
        :preserve
          <div data-react-class="Records" data-react-props="{...}"></div>
  %section
    %h1 Coffeescript
    %pre
      %code.coffeescript
        :preserve
          # app/assets/javascripts/components/records.js.coffee
            @Records = React.createClass
              render: ->
                React.DOM.div
                  className: 'records'
                  React.DOM.h2
                    className: 'title'
                    'Records'
    %h4 or with JSX syntax
    %pre
      %code.coffeescript
        :preserve
          @Records = React.createClass
            render: ->
              `<div className="records">
                <h2 className="title"> Records </h2>
              </div>`
  %section
    %h2 Components
    %pre
      %code.coffeescript
        :preserve
          # app/assets/javascripts/components/records.js.coffee
          @Records = React.createClass
            ...
            render: ->
              React.DOM.div
                className: 'records'
                React.DOM.h2
                  className: 'title'
                  'Records'
                React.DOM.table
                  className: 'table table-bordered'
                  React.DOM.tbody null,
                    for record in @state.records
                      React.createElement Record, key: record.id, record: record
  %section
    %h2 Single record
    %pre
      %code.coffeescript
        :preserve
          @Record = React.createClass
            render: ->
              React.DOM.tr null,
                React.DOM.td null, @props.record.date
                React.DOM.td null, @props.record.title
                React.DOM.td null, amountFormat(@props.record.amount)
  %section
    %h2 New record
    %pre
      %code.coffeescript
        :preserve
          # app/assets/javascripts/components/record_form.js.coffee

          @RecordForm = React.createClass
            getInitialState: ->
              title: ''
              date: ''
              amount: ''
            render: ->
              React.DOM.form
                className: 'form-inline'
                React.DOM.div
                  className: 'form-group'
                  React.DOM.input
                    type: 'text'
                    className: 'form-control'
                    placeholder: 'Date'
                    name: 'date'
                    value: @state.date
                    onChange: @handleChange
                React.DOM.div
                  className: 'form-group'
                  React.DOM.input
                    type: 'text'
                    className: 'form-control'
                    placeholder: 'Title'
                    name: 'title'
                    value: @state.title
                    onChange: @handleChange
                React.DOM.div
                  className: 'form-group'
                  React.DOM.input
                    type: 'number'
                    className: 'form-control'
                    placeholder: 'Amount'
                    name: 'amount'
                    value: @state.amount
                    onChange: @handleChange
                React.DOM.button
                  type: 'submit'
                  className: 'btn btn-primary'
                  disabled: !@valid()
                  'Create record'
  %section
    %h3 handling submitting
    %pre
      %code.coffeescript
        :preserve
          # app/assets/javascripts/components/record_form.js.coffee
          @RecordForm = React.createClass
            ...
            handleSubmit: (e) ->
              e.preventDefault()
              $.post '', { record: @state }, (data) =>
                @props.handleNewRecord data
                @setState @getInitialState()
              , 'JSON'

            render: ->
              React.DOM.form
                className: 'form-inline'
                onSubmit: @handleSubmit
              ...
  %section
    %h3 Updating the Parent
    %pre
      %code.coffeescript
        :preserve
          # app/assets/javascripts/components/records.js.coffee

          @Records = React.createClass
            ...
            addRecord: (record) ->
              records = @state.records.slice()
              records.push record
              @setState records: records
            render: ->
              React.DOM.div
                className: 'records'
                React.DOM.h2
                  className: 'title'
                  'Records'
                React.createElement RecordForm, handleNewRecord: @addRecord
                React.DOM.hr null
              ...
%section
  %section
    %h1 Real rails app
    %a{:href => "https://github.com/garciaf/react_app"} My react App
  %section
    %h1 Architecture
    %img{:src => image_path("2015-11-24-reactjs-and-rails/architecture.png"), :alt => "ranking"}/
  %section
    %h1 Testing with rspec and rails
    %pre
      %code.ruby
        :preserve
          describe "Integration", js: true, type: :feature do 
          it "should see react comment" do
            comment = FactoryGirl.create :comment
            visit root_path
            expect(page).to have_content(comment.text)
            expect(page).to have_content(comment.author)
          end
        end
    %h4 You can check real test here
    %a{:href => "https://codeship.com/projects/117924"}
      %img{:src => "https://camo.githubusercontent.com/b433078f5dd03bf282e3ef5f0b3fd02ecc84abdb/68747470733a2f2f636f6465736869702e636f6d2f70726f6a656374732f38386337383661302d373538622d303133332d383662312d3461316131663132326230642f7374617475733f6272616e63683d6d6173746572", :alt => "Codeship Status for garciaf/react_app", :style =>"max-width:100%;", "data-canonical-src" =>"https://codeship.com/projects/88c786a0-758b-0133-86b1-4a1a1f122b0d/status?branch=master"}/
  %section
    %h1 Testing component
    %h3 Still need to figured out how it works but there is official doc for it:
    %a{:href => "https://facebook.github.io/react/docs/test-utils.html"} Test Utilities
  %section
    %h1 I18n with rails
    %p 
      We can use the gem
      %a{:href => "https://github.com/fnando/i18n-js"} i18n-js
    %p And integrate in our component like this, it load the translation from the server side
    %pre
      %code.yaml
        :preserve
          # config/locales/en.yml
          en:
            hello: Hello World
    %pre
      %code.jsx
        :preserve
          render: function() {
            return (
                <div>
                  {I18n.t('hello')}
                </div>
            );
          }
  %section
    %h1 I18n with react
    %p
      Yahoo provide an ad-don to handle internationalization
      %a{:href => "https://github.com/yahoo/react-intl"} react-intl
      other option is 
      %a{:href => "https://github.com/fnando/i18n-js"} i18n-js

%section
  %h1 Json server side
  %h4 How to handle Json serialization?

  %p There is many solution out there but I will talk about two of them
%section
  %section
    %h1 Jbuilder
    %h4 API
    %p Single record
    %pre
      %code.ruby
        :preserve
          json.set! :author do
            json.set! :name, 'David'
          end

          # => "author": { "name": "David" }
    %p Array
    %pre
      %code.ruby
        :preserve
          # @people = People.all

          json.array! @people, :id, :name

          # => [ { "id": 1, "name": "David" }, { "id": 2, "name": "Jamie" } ]
  %section
    %p Nested in the class
    %pre
      %code.ruby
        :preserve
          class Person
            # ... Class Definition ... #
            def to_builder
              Jbuilder.new do |person|
                person.(self, :name, :age)
              end
            end
          end

          class Company
            # ... Class Definition ... #
            def to_builder
              Jbuilder.new do |company|
                company.name name
                company.president president.to_builder
              end
            end
          end

          company = Company.new('Doodle Corp', Person.new('John Stobs', 58))
          company.to_builder.target!
          # => {"name":"Doodle Corp","president":{"name":"John Stobs","age":58}}
  %section
    %p In a view:
    %pre
      %code.ruby
        :preserve
          # app/views/message/show.json.jbuilder
          json.content format_content(@message.content)
          json.(@message, :created_at)

          json.author do
            json.name @message.creator.name.familiar
            json.email_address @message.creator.email_address
          end
    %p Result: 
    %pre
      %code.json
        :preserve
          {
            "content": "<p>This is <i>serious</i> monkey business</p>",
            "created_at": "2011-10-29T20:45:28-05:00",

            "author": {
              "name": "David H.",
              "email_address": "david@n.com"
            }
          }
  %section
    %h1 Jbuilder
    %h4 Benefit
    %ul
      %li Really flexible
      %li handle nested object
      %li Supported by rails
      %li Can be implemented in a model
      %li Same controller can handle different format easily
  %section
    %h1 Jbuilder
    %h4 Drawback
    %ul
      %li Hard to keep things DRY
      %li Api not so intuitive
      %li Hard to use in a view
  %section
    %h1 So what else?
%section
  %section
    %h1 active model serializers
    %h4 Api
    %pre
      %code.ruby
        :preserve
          class IosAppSerializer < ActiveModel::Serializer

            include Rails.application.routes.url_helpers

            attributes :id, :name, :app_url
            
            def app_url
              ios_app_path(object)
            end

          end
  %section
    %h2 Controller
    %pre
      %code.ruby
        :preserve
          class IosAppsController < ApplicationController
            def index
              @ios_apps = IosApp.all
              respond_to do |format|
                format.json {render json: @ios_apps }
              end
            end
          end
  %section
    %h2 Helper
    %pre
      %code.ruby
        :preserve
          module ApplicationHelper
            def json_for(target)
              ActiveModel::SerializableResource.new(target).serializable_hash
            end
          end
    %h2 View
    %pre
      %code.haml
        :preserve
          = json_for(@ios_apps)
    %p Easy right?
  %section
    %h1 active model serializers
    %h4 Good point
    %ul
      %li Definition outside the model
      %li Can be used everywhere in the application
      %li Simple syntax
%section
  %h1 Building a application
  %h2 Client side 
%section
  %section
    %h1 Backbone react component
    %p We will use just react, backbone and backbone-react-component to glue them together
  %section
    %h2 Overview
    %img{:src => image_path("2015-11-24-reactjs-and-rails/code-structure.png"), :alt => ""}/
  %section
    %h2 App scope
    %p The purpose it to be able to access any component, model or collection in the code
    %pre
      %code.coffeescript
        :preserve
          window.MyApp =
            Models: {}
            Collections: {}
            Views: {}
  %section
    %h2 Collection and model
    %p Collection can refer special model via the App scope
    %pre
      %code.coffeescript
        :preserve
          # models/post.js.coffee
          MyApp.Models.Post = Backbone.Model.extend
    %pre
      %code.coffeescript
        :preserve
          # collections/posts.js.cofee
          MyApp.Collections.Posts = Backbone.Collection.extend
            model: MyApp.Models.Post
  %section
    %h2 Application file
    %p 
    %pre
      %code.coffeescript
        :preserve
          #= require ./vendor/jquery
          #= require ./vendor/underscore
          #= require ./vendor/backbone
          
          #= require ./vendor/react
          #= require ./vendor/react-dom
          
          #= require ./vendor/backbone-react-component
          
          #= require 'app_scope'

          #= require_tree './models'
          #= require_tree './collections'
          #= require_tree './components'

  %section
    %h2 Component server side
    %p <strong>react-rails</strong> will mount automatically the component with the script <strong>react-ujs</strong> and if we use the build in helpert
    %pre
      %code.erb
        :preserve
          <%# app/views/records/index.html.erb %>
          <%= react_component 'Blog', { data: @posts } %>
  %section
    %h2 Component client side
    %h3 IosAppBox
    %pre
      %code.coffeescript
        :preserve
          @IosAppBox = React.createClass
            mixins: [Backbone.React.Component.mixin]
            componentWillMount: ->
              iosApps = new ResignOps.Collections.IosApps
              iosApps.reset(@props.ios_apps)
              @onCollection @, iosApps
            componentWillUnmount: -> 
              @off(@)
            render: ->
              `<IosAppList> </IosAppList>`
  %section
    %h2 Component client side
    %h3 IosAppList
    %pre
      %code.coffescript
        :preserve
          @IosAppList = React.createClass
            mixins: [Backbone.React.Component.mixin]

            render: ->
              IosAppNodes = @getCollection().map((iosApp) ->
                `<IosAppRow model={iosApp} key={iosApp.cid} />`
              )
              `<tbody>
                {IosAppNodes}
              </tbody>`
  %section
    %h2 result
    %img{:src => image_path("2015-11-24-reactjs-and-rails/app-one-list.png"), :alt => ""}/
  %section
    %h1 But 
    %h2 what happen if we want to display this collection in several place?
  %section
    %h2 Like here
    %img{:src => image_path("2015-11-24-reactjs-and-rails/app-two-list.png"), :alt => ""}/
  %section
    %h2 You are screwed!
    %img{:src => image_path("2015-11-24-reactjs-and-rails/grumpy-cat.jpg"), :alt => ""}/
  %section
    %h1 Let's look for an other solution
%section
  %section
    %h1 Backbone react flux dispatcher
    %p React, backbone, flux, dispatcher and there friends join the party
  %section
    %h2 Overview
    %img{:src => image_path("2015-11-24-reactjs-and-rails/architecture-flux.png"), :alt => ""}/
  %section
    %h1 The dispatcher
    %pre
      %code.coffeescript
        :preserve
          @IosAppDispatcher = new Flux.Dispatcher()
    %p Open question: Do we need more than one dispatcher?
  %section
    %h2 Store
    %pre
      %code.coffeescript
        :preserve
          IosApp = Backbone.Model.extend
            urlRoot: '/ios_apps/'

          IosAppCollection = Backbone.Collection.extend
            model: IosApp
            url: '/ios_apps'
            initialize: ->
              @dispatchToken = window.IosAppDispatcher.register (payload) =>
                switch payload.actionType
                  when "ios_app-delete"
                    @get(payload.ios_app).destroy()
                  when "ios_app-add"
                    @add(payload.ios_app, {merge: true, sort: true})

          @IosAppStore = new IosAppCollection()
    %p A store is just an instance of a collection or model
  %section
    %h2 Component
    %pre
      %code.coffeescript
        :preserve
          IosAppStore = @IosAppStore
          @IosAppThumbs = React.createClass
            getInitialState: ->
              {
                IosAppStore: IosAppStore
              }
            componentDidMount: ->
              @state.IosAppStore.on "all", =>
                @forceUpdate()
              , @
            render: ->
              IosAppNodes = @state.IosAppStore.map((iosApp) ->
                `<div key={iosApp.cid}> 
                    <a href={iosApp.get("app_url")} className="thumbnail">
                    <img src={iosApp.get("standard_app_icon")}/>
                  </a>
                </div>`
              )
              `{IosAppNodes}`
  %section
    %h2 Triger action from the component
    %pre
      %code.coffeescript
        :preserve
          IosAppDispatcher = @IosAppDispatcher

          @IosAppRow = React.createClass
            destroy: (e) ->
              e.preventDefault()
              IosAppDispatcher.dispatch
                actionType: 'ios_app-delete'
                ios_app: @props.iosApp
  %section
    %h2 result
    %h4 Creating
    %img{:src => image_path("2015-11-24-reactjs-and-rails/app-two-list-flux-create.gif"), :alt => ""}/
  %section
    %h2 result
    %h4 Destroying
    %img{:src => image_path("2015-11-24-reactjs-and-rails/app-two-list-flux.gif"), :alt => ""}/
  %section
    %h2 Booth list are sync because they share the same store
  %section
    %h1 Happy?
    %img{:src => image_path("2015-11-24-reactjs-and-rails/happy-grumpy-cat.png"), :alt => ""}/
  %section
    %h1 Not completely
    %h2 Still few open questions
    %ul
      %li Where or who should populate the store?
      %li When using a prop and when a state?
      %li John snow is really dead? I mean forever dead?
%section
  %h1 Sources
  %ul
    %li 
      %a{:href => "https://www.airpair.com/reactjs/posts/reactjs-a-guide-for-rails-developers"} A guide for Rails developers
    %li 
      %a{:href => "https://hackhands.com/react-rails-tutorial/"} React on Rails Tutorial
    %li 
      %a{:href => "https://github.com/reactjs/react-rails"} gem react rails
    %li
      %a{:href => "https://github.com/garciaf/react_app"} Rails implementation with backbone and react
    %li
      %a{:href => "https://github.com/garciaf/local_blog"} Middleman implementation with backbone and react
    %li
      %a{:href => "http://www.toptal.com/front-end/simple-data-flow-in-react-applications-using-flux-and-backbone"} Simple Data Flow in React Apps Using Flux and Backbone 
%section
  %h1 Question ?
  %img{:src => image_path("2015-11-24-reactjs-and-rails/question.gif"), :alt => "ranking"}/
